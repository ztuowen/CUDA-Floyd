template<typename T>
__global__ void cuFloydSDKnl(T *adjmat,const MatrixDim dim,const unsigned int node)
{
  unsigned int x=threadIdx.x,y=threadIdx.y,ry,rx;
  ry=y&15;
  rx=(y&0xFFF0)+x;
  unsigned int bx=blockIdx.x,by=blockIdx.y;
  unsigned int posn,pos;
  __shared__ T tmpL[64][16],tmpR[16][64];
  T len[4];
  T nlen;
  if (by==0)
  {
    posn=(node+y)*dim.stride+node+x;
    pos=(node+ry)*dim.stride+bx*ITERSIZE+rx;
    for (int i=0;i<4;++i)
      len[i]=adjmat[pos+((i*dim.stride)<<4)];
    for (int i=0;i<4;++i)
    {
      tmpL[y][x]=adjmat[posn+(i<<4)];
      for (int k=0;k<16;++k)
      {
        //if (ry==k)
        tmpR[ry][rx]=len[i];
        __syncthreads();
        for (int j=0;j<4;++j)
        {
          nlen=tmpL[(j<<4)+ry][k]+tmpR[k][rx];
          len[j]=len[j]>nlen?nlen:len[j];
        }
        __syncthreads();
      }

    }
    for (int i=0;i<4;++i)
      adjmat[pos+((i*dim.stride)<<4)]=len[i];
  }
  else
  {
    posn=(node+ry)*dim.stride+node+rx;
    pos=(bx*ITERSIZE+y)*dim.stride+node+x;
    for (int i=0;i<4;++i)
      len[i]=adjmat[pos+(i<<4)];
    for (int i=0;i<4;++i)
    {
      tmpR[ry][rx]=adjmat[posn+((i*dim.stride)<<4)];
      for (int k=0;k<16;++k)
      {
        //if (x==k)
        tmpL[y][x]=len[i];
        __syncthreads();
        for (int j=0;j<4;++j)
        {
          nlen=tmpL[y][k]+tmpR[k][(j<<4)+x];
          len[j]=len[j]>nlen?nlen:len[j];
        }
        __syncthreads();
      }
      //__syncthreads();
    }
    for (int i=0;i<4;++i)
      adjmat[pos+(i<<4)]=len[i];
  }
}
